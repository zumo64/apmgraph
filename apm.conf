# tested with logstash-7.6.2

input {
    file {
        path => ["/Users/zumo/PycharmProjects/apmgraph/events.log"]
        sincedb_path =>  "/tmp/mysincedbfile"
        add_field => {
            "raw_message" => "%{message}"
        }
    }
}

filter {

    dissect {
        mapping => {
            "message" => "%{event_timestamp}|%{log_level}|%{step}|%{entity_id}|%{message}|%{service_name}|%{flow_name}"
        }

    }

    fingerprint {
        method => "MD5"
        source => "raw_message"
    }

    date {
        match => [ "event_timestamp", "ISO8601"]
        target => "event_timestamp"
    }

    ruby {
        code => "
        event.set('events',
            [
                Hash[
                    'event_timestamp', event.get('event_timestamp'),
                    'message', event.get('message'),
                    'step_name', event.get('step'),
                    'raw_message', event.get('raw_message'),
                    'event_id', event.get('fingerprint'),

                    'agent_name', 'log stream',
                    'agent_version', '1',
                    'service_name', event.get('service_name'),
                    'flow_name', event.get('flow_name'),
                    'transaction_result', 'Order Shipped',
                ]
            ]
        )

        events = Array.new
        event.set('event_ids', events.push(event.get('fingerprint')))
        "
    }

    mutate {
        remove_field => ["path", "host", "raw_message", "step", "message", "event_timestamp", "fingerprint"]
        add_field => {
            "last_updated" => "%{@timestamp}"
        }
    }
}

output {

 #   stdout {
 #       codec => rubydebug
 #   }

    elasticsearch {
        ssl => true
        cloud_id => "apm-services:ZXVyb3BlLXdlc3QxLmdjcC5jbG91ZC5lcy5pbyRiYmI0NWI5NTg4MGQ0NjdjODk2ZDliYzFlYTVkNzMzYyRlZmU3ZWVkNzQ2MDM0NTNjYmY5YjhlM2MzYmUyZTI4ZA=="
        cloud_auth => "elastic:5eNWakDsxtK664P5l8SO6pFP"
        index => "log-entity"
        document_id => "%{entity_id}"
        doc_as_upsert => true
        document_type => "doc"
        action => "update"
        script_lang => "painless"
        script_type => "inline"
        script => '
            /**
            * set variables to use in script
            **/
            String event_id = params.event.get("events")[0]["event_id"];
            ArrayList es_stored_event_ids = ctx._source.event_ids;

            /**
            * only add to log event and update event if unique log id not seen before
            **/
            if (!es_stored_event_ids.contains(event_id)) {
                ctx._source.event_ids.add(event_id);

                ctx._source.events.add(params.event.get("events")[0]);
                ctx._source.last_updated = params.event.get("last_updated");
            }
        '
    }

}